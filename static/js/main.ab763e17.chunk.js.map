{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","data","setData","useEffect","ajax","Ajax","send","onSuccess","JSON","parse","value","style","margin","marginTop","dataSource","allowPaging","pageSettings","pageSize","editSettings","allowEditing","allowAdding","allowDeleting","mode","toolbar","field","headerText","textAlign","width","isPrimaryKey","editType","format","type","editTemplate","args","PhoneNumber","mask","id","services","Page","Edit","Toolbar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAsGeA,MArFf,WAAe,MAuBWC,mBAAS,IAvBpB,mBAuBNC,EAvBM,KAuBAC,EAvBA,KAkCb,OAVAC,qBAAU,WACR,IAAMC,EAAO,IAAIC,IACf,+DACA,OAEFD,EAAKE,OACLF,EAAKG,UAAY,SAACN,GAChBC,EAAQM,KAAKC,MAAMR,GAAMS,UAE1B,IAED,yBAAKC,MAAO,CAAEC,OAAQ,MAAOC,UAAW,OACtC,kBAAC,IAAD,CACEC,WAAYb,EACZc,aAAa,EACbC,aAAc,CAAEC,SAAU,GAC1BC,aAvCiC,CACrCC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,KAAM,SAoCFC,QAlCiC,CACrC,MACA,OACA,SACA,SACA,WA+BI,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,UACNC,WAAW,KACXC,UAAU,QACVC,MAAM,MACNC,cAAc,IAEhB,kBAAC,IAAD,CACEJ,MAAM,aACNC,WAAW,aACXE,MAAM,QAER,kBAAC,IAAD,CACEH,MAAM,cACNC,WAAW,UACXI,SAAS,iBAEX,kBAAC,IAAD,CAAiBL,MAAM,WAAWC,WAAW,eAC7C,kBAAC,IAAD,CACED,MAAM,UACNC,WAAW,SACXC,UAAU,QACVI,OAAO,KACPH,MAAM,MACNE,SAAS,gBAEX,kBAAC,IAAD,CACEL,MAAM,YACNC,WAAW,cACXM,KAAK,OACLD,OAAO,MACPH,MAAM,MACNK,aA9DV,SAAsBC,GACpB,OACE,kBAAC,IAAD,CACEvB,MAAOuB,EAAKC,YACZC,KAAK,eACLC,GAAG,oBA4DH,kBAAC,IAAD,CAAQC,SAAU,CAACC,IAAMC,IAAMC,UCpFnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab763e17.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  GridComponent,\n  ColumnDirective,\n  ColumnsDirective,\n  Page,\n  Inject,\n  Edit,\n  EditSettingsModel,\n  Toolbar,\n  ToolbarItems,\n  IEditCell,\n} from \"@syncfusion/ej2-react-grids\";\nimport { MaskedTextBoxComponent } from \"@syncfusion/ej2-react-inputs\";\nimport { Ajax } from \"@syncfusion/ej2-base\";\nimport \"./App.css\";\n\nfunction App() {\n  const editOptions: EditSettingsModel = {\n    allowEditing: true,\n    allowAdding: true,\n    allowDeleting: true,\n    mode: \"Batch\",\n  };\n  const toolbarOptions: ToolbarItems[] = [\n    \"Add\",\n    \"Edit\",\n    \"Delete\",\n    \"Update\",\n    \"Cancel\",\n  ];\n  function editTemplate(args: any) {\n    return (\n      <MaskedTextBoxComponent\n        value={args.PhoneNumber}\n        mask=\"000-000-0000\"\n        id=\"PhoneNumber\"\n      />\n    );\n  }\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const ajax = new Ajax(\n      \"https://services.odata.org/V4/Northwind/Northwind.svc/Orders\",\n      \"GET\"\n    );\n    ajax.send();\n    ajax.onSuccess = (data: any) => {\n      setData(JSON.parse(data).value);\n    };\n  }, []);\n  return (\n    <div style={{ margin: \"10%\", marginTop: \"5%\" }}>\n      <GridComponent\n        dataSource={data}\n        allowPaging={true}\n        pageSettings={{ pageSize: 6 }}\n        editSettings={editOptions}\n        toolbar={toolbarOptions}\n      >\n        <ColumnsDirective>\n          <ColumnDirective\n            field=\"OrderID\"\n            headerText=\"ID\"\n            textAlign=\"Right\"\n            width=\"100\"\n            isPrimaryKey={true}\n          />\n          <ColumnDirective\n            field=\"CustomerID\"\n            headerText=\"EmployeeNo\"\n            width=\"150\"\n          />\n          <ColumnDirective\n            field=\"ShipCountry\"\n            headerText=\"Company\"\n            editType=\"dropdownedit\"\n          />\n          <ColumnDirective field=\"ShipName\" headerText=\"Department\" />\n          <ColumnDirective\n            field=\"Freight\"\n            headerText=\"Salary\"\n            textAlign=\"Right\"\n            format=\"C2\"\n            width=\"150\"\n            editType=\"numericedit\"\n          />\n          <ColumnDirective\n            field=\"OrderDate\"\n            headerText=\"JoiningDate\"\n            type=\"date\"\n            format=\"yMd\"\n            width=\"150\"\n            editTemplate={editTemplate}\n          />\n        </ColumnsDirective>\n        <Inject services={[Page, Edit, Toolbar]} />\n      </GridComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}